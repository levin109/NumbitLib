<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrayMatch" xml:space="preserve">
    <value>Array dimensions must agree.</value>
  </data>
  <data name="Bidiag" xml:space="preserve">
    <value>Rows must greater than columns.</value>
  </data>
  <data name="Cat" xml:space="preserve">
    <value>Dimensions of matrices being concatenated are not consistent.</value>
  </data>
  <data name="CompareTo" xml:space="preserve">
    <value>Not a Complex number.</value>
  </data>
  <data name="Converge" xml:space="preserve">
    <value>Arithmetic Failed: Convergence is not reached.</value>
  </data>
  <data name="CrossProd" xml:space="preserve">
    <value>It can only compute the Cross Product in three dimension.</value>
  </data>
  <data name="Deconv" xml:space="preserve">
    <value>Division by zero Polynomial.</value>
  </data>
  <data name="Hermitian" xml:space="preserve">
    <value>Matrix must be Hermitian matrix.</value>
  </data>
  <data name="IsSquare" xml:space="preserve">
    <value>Matrix must be square.</value>
  </data>
  <data name="IsSymetric" xml:space="preserve">
    <value>Matrix must be symmetric.</value>
  </data>
  <data name="IsTridiag" xml:space="preserve">
    <value>Matrix must be tridiagonal.</value>
  </data>
  <data name="LU" xml:space="preserve">
    <value>LU decomposition whithout pivoting does not exist!</value>
  </data>
  <data name="MatrixCtor" xml:space="preserve">
    <value>Rows and columns must be a positive integer number.</value>
  </data>
  <data name="MatrixCtor1" xml:space="preserve">
    <value>Dimensions must be consistent with the elements number.</value>
  </data>
  <data name="MatrixCtor2" xml:space="preserve">
    <value>Size must be a positive integer number.</value>
  </data>
  <data name="MatrixMatch" xml:space="preserve">
    <value>Matrix dimensions must agree.</value>
  </data>
  <data name="MatrixMul" xml:space="preserve">
    <value>Inner matrix dimensions must agree.</value>
  </data>
  <data name="Nchoosek" xml:space="preserve">
    <value>Combinatorial number: Cnk,which k must be an integer between 0 and n.</value>
  </data>
  <data name="NonNegInt" xml:space="preserve">
    <value>Argument must be a nonnegative integer.</value>
  </data>
  <data name="Norm" xml:space="preserve">
    <value>Invalid arguments: p=1 or  2, 'I', 'F'.</value>
  </data>
  <data name="Polyder" xml:space="preserve">
    <value>n-th derivative,which n must be a nonnegative number.</value>
  </data>
  <data name="PosDef" xml:space="preserve">
    <value>Matrix must be positive definite.</value>
  </data>
  <data name="PosInt" xml:space="preserve">
    <value>Argument must be positive integer.</value>
  </data>
  <data name="RelFac" xml:space="preserve">
    <value>The relaxation factor w must be: 0&lt;w&lt;2.</value>
  </data>
  <data name="Roots" xml:space="preserve">
    <value>Empty matrix: 0-by-1</value>
  </data>
  <data name="Singular" xml:space="preserve">
    <value>Matrix is badly scaled or nearly singular!</value>
  </data>
  <data name="Solve" xml:space="preserve">
    <value>Matrix dimensions must agree.</value>
  </data>
  <data name="Sort" xml:space="preserve">
    <value>Invalid argument: mode must be 1 or 2.</value>
  </data>
</root>